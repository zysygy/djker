04/02/2016

First attempt at how to implement core algo

Storing Node Information
-node name (or maybe it is simply sequential)
-# neighbours
-weights to those neighbours
-for graph with n # of nodes, create array G of size n node objects
-node objects consist of name, # of neighbours, array (maybe LL?) of neighbours + their weights + "visited" status

Running Dijk
-create array SP of size n, increasing element indexes are associated with increasing order of nodes in alphanumeric order
-each element initialized to infinity except starting node (0) (either need a lib or a workaround)
-maybe combine this with array G?
--
Rough Pseudocode
for i = 1 to n
    while there are still unvisited nodes
	Add weight of current node to weight to get to neighbour
        Compare and update values of neighbours in array SP if lower
	Find unvisited node in G.neighbours[] with lowest weight in SP
--

Internet says I should do try this with queues

06/02/2016

For representing the graph itself, let's go with an adjacency list, though this solution looks cool http://stackoverflow.com/a/12305436

Vector of arrays is probably best

07/02/2016

Well I lost the assignment deadline. Oh well

2D Vector was the solution. Learned some fancy and syntactically pleasing ways of initializing the vectors.

Core algo is done now, implementation mostly lifted from some pseudocode from Wikipedia

17/02/2016

Busy with CNY and sick past couple weeks
After discussion, we're not going to implement infinity for now due to storage issues, though in future we could try something like QVariant from qt
Let's just get first implementation up and running

20/3/2016

The Deletion problem

Originally when implementing the algorithm, I used some pseudocode that cleverly deleted elements from the graph
to mark them as "visited" nodes. However, I mishandled how I referenced the nodes to be selected at each iteration of the loop.
Ideally, the algorithm should attempt to find the element in the graph that has the lowest distance not been visited. Since
the distances to each node and the graph itself were stored in separate data structures (one an array, the other a separate vector)
I kept on missing the index of the node that was actually being selected for a round whenever there was a deletion.

eg. If at a certain iteration of the loop the 3rd node is picked, after it is done it is deleted from the graph. Since I used direct indices of the vector
to select the node (ie. I assumed graph[3] would always give me the 4th node of the graph), this would me to select the wrong node since everything shifted down
one after the deletion

As a temporary stop-gap to just make things work, I created a "visited" array to explicitly track which elements had been visited.

Due to the deletion problem shifting the orders of the elements, I had troubles keeping track of which element in the graph I would end up picking. Fortunately,
I ended up figuring out that I could just update a temporary pointer to the vertex as we went along, only updating it when it was found to be a shorter distance
than the currently selected node.

As a result, the code is pretty jumbled with a lot of unncessary code and would definitely need an additional code pass to tighten things up. The clunkiness
mainly surrounds the initial node selection; the subsequent updating of the distance array is fairly good.

